{:rename-macros {}, :renames {}, :use-macros {match cljs.core.match}, :excludes #{}, :name unicodots.dot, :imports nil, :requires {cljs.core.match cljs.core.match, loggers re-frame.loggers, re-frame.loggers re-frame.loggers}, :uses nil, :defs {log {:name unicodots.dot/log, :file "src/cljs/unicodots/dot.cljs", :line 6, :column 1, :end-line 6, :end-column 9, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/dot.cljs", :line 6, :column 6, :end-line 6, :end-column 9}}, move-dot {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/dot.cljs", :line 8, :column 7, :end-line 8, :end-column 15, :arglists (quote ([{id :unicodots.dot/id, dot-dir :unicodots.dot/dir, :as dot} {:keys [reflect force], :as options}]))}, :name unicodots.dot/move-dot, :variadic false, :file "src/cljs/unicodots/dot.cljs", :end-column 15, :method-params ([p__75125 p__75126]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{id :unicodots.dot/id, dot-dir :unicodots.dot/dir, :as dot} {:keys [reflect force], :as options}]))}, reverse-direction {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/dot.cljs", :line 34, :column 7, :end-line 34, :end-column 24, :arglists (quote ([direction]))}, :name unicodots.dot/reverse-direction, :variadic false, :file "src/cljs/unicodots/dot.cljs", :end-column 24, :method-params ([direction]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([direction]))}, process-input {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/dot.cljs", :line 42, :column 7, :end-line 42, :end-column 20, :arglists (quote ([db]))}, :name unicodots.dot/process-input, :variadic false, :file "src/cljs/unicodots/dot.cljs", :end-column 20, :method-params ([db]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([db]))}, tile-fns {:name unicodots.dot/tile-fns, :file "src/cljs/unicodots/dot.cljs", :line 57, :column 1, :end-line 57, :end-column 14, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/dot.cljs", :line 57, :column 6, :end-line 57, :end-column 14}}, process-fn {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/dot.cljs", :line 77, :column 7, :end-line 77, :end-column 17, :arglists (quote ([db location]))}, :name unicodots.dot/process-fn, :variadic false, :file "src/cljs/unicodots/dot.cljs", :end-column 17, :method-params ([db location]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db location]))}, tile-defaults {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/dot.cljs", :line 100, :column 7, :end-line 100, :end-column 20, :arglists (quote ([tile-type]))}, :name unicodots.dot/tile-defaults, :variadic false, :file "src/cljs/unicodots/dot.cljs", :end-column 20, :method-params ([tile-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tile-type]))}, transition-dot {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/dot.cljs", :line 109, :column 7, :end-line 109, :end-column 21, :arglists (quote ([dot tile]))}, :name unicodots.dot/transition-dot, :variadic false, :file "src/cljs/unicodots/dot.cljs", :end-column 21, :method-params ([dot tile]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dot tile]))}}, :require-macros {cljs.core.match cljs.core.match}, :cljs.analyzer/constants {:seen #{:send-output :unicodots.dot/fn-mod :unicodots.dot/conditional :unicodots.dot/down :unicodots.dot/location-type :unicodots.dot/macro-stack :unicodots.dot/fn-minus :unicodots.dot/fn-less-than-equal :unicodots.dot/die :unicodots.dot/fn-times :accumulate-raw-output :unicodots.dot/fn-exponent :unicodots.dot/fn :unicodots.dot/horizontal :unicodots.dot/dir :force :unicodots.dot/fn-not :else :unicodots.dot/vertical-queue :end-dot-quote :unicodots.dot/fn-less-than :kill-dot :unicodots.dot/fn-greater-than :unicodots.dot/positive :unicodots.dot/fn-not-equal :enqueue-input :unicodots.dot/fn-or :unicodots.dot/fn-and :unicodots.dot/fn-add :move-dot :unicodots.dot/vertical :unicodots.dot/output :unicodots.dot/function :set-raw-value :unicodots.dot/negative :unicodots.dot/value :unicodots.dot/state :unicodots.dot/up :unicodots.dot/merge :unicodots.dot/pipe :enqueue-fn :unicodots.dot/fn-greater-than-or-equal :world :ready-fns :unicodots.dot/macro :unicodots.dot/fn-divide :unicodots.dot/fn-xor :unicodots.dot/id :unicodots.dot/quote :send-input :input-queue :unicodots.dot/fn-equal :unicodots.dot/empty-tile :flush-output :unicodots.dot/right :accumulate-output :unicodots.dot/moving :set-macro :append-value :unicodots.dot/both :send-raw-input :unicodots.dot/literal :append-macro :set-value :unicodots.dot/location :unicodots.dot/horizontal-queue :input :apply-macro :unicodots.dot/enqueued :unicodots.dot/input :dots :log :unicodots.dot/path :unicodots.dot/reflect :duplicate-dot :reflect :unicodots.dot/left :set-dot-state :unicodots.dot/escape :unicodots.dot/duplicate}, :order [:log :unicodots.dot/id :unicodots.dot/dir :reflect :force :else :unicodots.dot/negative :unicodots.dot/down :unicodots.dot/right :unicodots.dot/up :unicodots.dot/left :unicodots.dot/positive :unicodots.dot/location :input :input-queue :dots :unicodots.dot/value :unicodots.dot/state :unicodots.dot/moving :unicodots.dot/fn-mod :unicodots.dot/fn-minus :unicodots.dot/fn-less-than-equal :unicodots.dot/fn-times :unicodots.dot/fn-exponent :unicodots.dot/fn-not :unicodots.dot/fn-less-than :unicodots.dot/fn-greater-than :unicodots.dot/fn-not-equal :unicodots.dot/fn-or :unicodots.dot/fn-and :unicodots.dot/fn-add :unicodots.dot/fn-greater-than-or-equal :unicodots.dot/fn-divide :unicodots.dot/fn-xor :unicodots.dot/fn-equal :world :unicodots.dot/location-type :unicodots.dot/horizontal-queue :unicodots.dot/vertical-queue :unicodots.dot/vertical :ready-fns :unicodots.dot/conditional :unicodots.dot/function :unicodots.dot/empty-tile :unicodots.dot/macro-stack :kill-dot :apply-macro :unicodots.dot/input :enqueue-input :unicodots.dot/fn :enqueue-fn :unicodots.dot/enqueued :unicodots.dot/duplicate :duplicate-dot :unicodots.dot/literal :unicodots.dot/output :send-output :move-dot :append-value :unicodots.dot/quote :unicodots.dot/macro :set-dot-state :end-dot-quote :unicodots.dot/pipe :set-value :send-input :set-macro :unicodots.dot/path :unicodots.dot/horizontal :unicodots.dot/both :unicodots.dot/merge :unicodots.dot/reflect :unicodots.dot/die :send-raw-input :append-macro :set-raw-value :accumulate-raw-output :unicodots.dot/escape :accumulate-output :flush-output]}, :doc nil}