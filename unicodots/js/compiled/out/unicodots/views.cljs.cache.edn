{:rename-macros {}, :renames {}, :use-macros {join clojure.string, match cljs.core.match}, :excludes #{}, :name unicodots.views, :imports {EventType goog.events.EventType}, :requires {dot unicodots.dot, unicodots.dot unicodots.dot, loggers re-frame.loggers, EventType goog.events.EventType, events goog.events, re-frame.loggers re-frame.loggers, clojure.string clojure.string, cljs.core.match cljs.core.match, goog.events goog.events, re-frame re-frame.core, re-frame.core re-frame.core}, :uses {join clojure.string}, :defs {left-bar {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/views.cljs", :line 146, :column 7, :end-line 146, :end-column 15, :arglists (quote ([]))}, :name unicodots.views/left-bar, :variadic false, :file "src/cljs/unicodots/views.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, input-display {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/views.cljs", :line 125, :column 7, :end-line 125, :end-column 20, :arglists (quote ([]))}, :name unicodots.views/input-display, :variadic false, :file "src/cljs/unicodots/views.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, log {:name unicodots.views/log, :file "src/cljs/unicodots/views.cljs", :line 10, :column 1, :end-line 10, :end-column 9, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/views.cljs", :line 10, :column 6, :end-line 10, :end-column 9}}, world-dot {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/views.cljs", :line 351, :column 7, :end-line 351, :end-column 16, :arglists (quote ([id]))}, :name unicodots.views/world-dot, :variadic false, :file "src/cljs/unicodots/views.cljs", :end-column 16, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 351, :end-line 351, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id]))}, get-location-image {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/views.cljs", :line 81, :column 7, :end-line 81, :end-column 25, :arglists (quote ([tile-type]))}, :name unicodots.views/get-location-image, :variadic false, :file "src/cljs/unicodots/views.cljs", :end-column 25, :method-params ([tile-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tile-type]))}, output-display {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/views.cljs", :line 114, :column 7, :end-line 114, :end-column 21, :arglists (quote ([]))}, :name unicodots.views/output-display, :variadic false, :file "src/cljs/unicodots/views.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, main-panel {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/views.cljs", :line 381, :column 7, :end-line 381, :end-column 17, :arglists (quote ([]))}, :name unicodots.views/main-panel, :variadic false, :file "src/cljs/unicodots/views.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 381, :end-line 381, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, install-key-listeners {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/views.cljs", :line 458, :column 7, :end-line 458, :end-column 28, :arglists (quote ([]))}, :name unicodots.views/install-key-listeners, :variadic false, :file "src/cljs/unicodots/views.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 458, :end-line 458, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, location-type-map {:name unicodots.views/location-type-map, :file "src/cljs/unicodots/views.cljs", :line 16, :column 1, :end-line 16, :end-column 23, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/views.cljs", :line 16, :column 6, :end-line 16, :end-column 23}}, footer {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/views.cljs", :line 375, :column 7, :end-line 375, :end-column 13, :arglists (quote ([]))}, :name unicodots.views/footer, :variadic false, :file "src/cljs/unicodots/views.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 375, :end-line 375, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, top-bar {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/views.cljs", :line 100, :column 7, :end-line 100, :end-column 14, :arglists (quote ([]))}, :name unicodots.views/top-bar, :variadic false, :file "src/cljs/unicodots/views.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, world {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/views.cljs", :line 359, :column 7, :end-line 359, :end-column 12, :arglists (quote ([]))}, :name unicodots.views/world, :variadic false, :file "src/cljs/unicodots/views.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 359, :end-line 359, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, key-pressed {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/views.cljs", :line 394, :column 7, :end-line 394, :end-column 18, :arglists (quote ([event]))}, :name unicodots.views/key-pressed, :variadic false, :file "src/cljs/unicodots/views.cljs", :end-column 18, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 394, :end-line 394, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event]))}, tiled-location {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/views.cljs", :line 92, :column 7, :end-line 92, :end-column 21, :arglists (quote ([{l :unicodots.dot/location, t :unicodots.dot/location-type} theme]))}, :name unicodots.views/tiled-location, :variadic false, :file "src/cljs/unicodots/views.cljs", :end-column 21, :method-params ([p__75598 theme]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{l :unicodots.dot/location, t :unicodots.dot/location-type} theme]))}, right-bar {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/views.cljs", :line 137, :column 7, :end-line 137, :end-column 16, :arglists (quote ([]))}, :name unicodots.views/right-bar, :variadic false, :file "src/cljs/unicodots/views.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, empty-location {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/views.cljs", :line 86, :column 7, :end-line 86, :end-column 21, :arglists (quote ([l t]))}, :name unicodots.views/empty-location, :variadic false, :file "src/cljs/unicodots/views.cljs", :end-column 21, :method-params ([l t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l t]))}, grid-coord {:protocol-inline nil, :meta {:file "/Users/bc/Documents/recurse_work/clojure/unicodots/src/cljs/unicodots/views.cljs", :line 12, :column 7, :end-line 12, :end-column 17, :arglists (quote ([[x y]]))}, :name unicodots.views/grid-coord, :variadic false, :file "src/cljs/unicodots/views.cljs", :end-column 17, :method-params ([p__75591]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[x y]]))}}, :require-macros {cljs.core.match cljs.core.match}, :cljs.analyzer/constants {:seen #{:set-step-timer :unicodots.dot/fn-mod :unicodots.dot/conditional :unicodots.dot/pre-function :unicodots.dot/down :unicodots.dot/fn-multiply :unicodots.dot/location-type :min :unicodots.dot/fn-minus :unicodots.dot/fn-less-than-equal :unicodots.dot/die :unicodots.dot/fn-exponent :unicodots.dot/fn :key :unicodots.dot/horizontal :else :button :unicodots.dot/fn-less-than-or-equal :step-delay-val :grid-gap :unicodots.dot/fn-less-than :unicodots.dot/fn-greater-than :unicodots.dot/positive :value :unicodots.dot/fn-not-equal :unicodots.dot/fn-or :unicodots.dot/fn-and :unicodots.dot/fn-add :current-paint :type :unicodots.dot/vertical :output :unicodots.dot/output :unicodots.dot/fn-modulus :on-click :unicodots.dot/negative :unicodots.dot/value :step-program :style :theme :textarea :unicodots.dot/up :unicodots.dot/merge :unicodots.dot/pipe :div :unicodots.dot/fn-greater-than-or-equal :world :unicodots.dot/macro :grid-row :unicodots.dot/fn-divide :unicodots.dot/fn-xor :padding-top :div#header :unicodots.dot/quote :max :class :update-input :unicodots.dot/fn-equal :unicodots.dot/empty-tile :unicodots.dot/right :unicodots.dot/glyph :paint-tile :set-current-paint :unicodots.dot/both :unicodots.dot/literal :unicodots.dot/location :input :padding-bottom :dot :unicodots.dot/dot :on-change :div.palettes :unicodots.dot/input :location :step :log :p :unicodots.dot/path :unicodots.dot/reflect :dot-ids :unicodots.dot/left :grid-column :unicodots.dot/fn-stub :start-program-stepping :toggle-current-paint :stop-program-stepping :unicodots.dot/duplicate}, :order [:log :style :grid-column :grid-row :unicodots.dot/path :unicodots.dot/vertical :unicodots.dot/fn :unicodots.dot/fn-divide :unicodots.dot/horizontal :unicodots.dot/fn-multiply :unicodots.dot/reflect :unicodots.dot/right :unicodots.dot/fn-or :unicodots.dot/fn-minus :unicodots.dot/macro :unicodots.dot/fn-equal :unicodots.dot/fn-mod :unicodots.dot/fn-greater-than :unicodots.dot/duplicate :unicodots.dot/fn-less-than :unicodots.dot/fn-greater-than-or-equal :unicodots.dot/merge :unicodots.dot/down :unicodots.dot/conditional :unicodots.dot/fn-add :unicodots.dot/left :unicodots.dot/fn-exponent :unicodots.dot/quote :unicodots.dot/input :unicodots.dot/negative :unicodots.dot/up :unicodots.dot/fn-xor :unicodots.dot/both :unicodots.dot/output :unicodots.dot/empty-tile :unicodots.dot/positive :unicodots.dot/die :unicodots.dot/fn-and :unicodots.dot/fn-less-than-or-equal :unicodots.dot/fn-not-equal :unicodots.dot/value :div :on-click :paint-tile :key :location :unicodots.dot/location :unicodots.dot/location-type :unicodots.dot/literal :step-delay-val :div#header :class :button :step-program :start-program-stepping :stop-program-stepping :input :type :min :max :step :value :on-change :set-step-timer :output :p :textarea :update-input :theme :current-paint :div.palettes :toggle-current-paint :unicodots.dot/pre-function :unicodots.dot/fn-modulus :unicodots.dot/fn-less-than-equal :grid-gap :padding-top :padding-bottom :unicodots.dot/dot :dot :unicodots.dot/glyph :world :dot-ids :else :unicodots.dot/fn-stub :unicodots.dot/pipe :set-current-paint]}, :doc nil}